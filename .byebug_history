c
d.render
own_pieces.each { |p| puts "#{p.class}: #{p.valid_moves}" }
own_pieces = grid.flatten.select{ |pc| pc.color == :white }
in_check?(:white)
checkmate?(:black)
checkmate?(:white)
checkmate?(white)
d.board.checkmate?
d.render
d = Display.new(dup)
d = Display.new(board.dup)
c
dup_display.render
dup_display = Display.new(self.dup)
c
dup_display.render
new_display.render
dup_display = Display.new(self.dup)
own_pieces.each {|piece| puts "#{piece.class}: #{piece.valid_moves}"};
own_pieces.each {|piece| puts "#{piece.class}: #{piece.valid_moves}";};
own_pieces.each {|piece| puts "#{piece.class}: #{piece.valid_moves}" ;}
own_pieces.each {|piece| puts "#{piece.class}: #{piece.valid_moves}" }
own_pieces.map {|piece| piece.valid_moves}
own_pieces = grid.flatten.select { |piece| piece.color == :white }
own_pieces = grid.flatten.select { |piece| piece.color == color }
in_check?(:white)
self.checkmate?(:white)
self
c
checkmate?(:white)
board
own_pieces.map(&:color)
own_pieces.map(&:class)
own_pieces
c
